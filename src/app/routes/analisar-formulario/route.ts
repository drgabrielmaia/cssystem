import { NextRequest, NextResponse } from 'next/server'

async function analisarComGemma(tipoFormulario: string, resposta: any, mentoradoNome?: string): Promise<any> {
  try {
    const contexto = `Voc√™ √© um especialista em Customer Success e an√°lise de satisfa√ß√£o do cliente.

INSTRU√á√ÉO FUNDAMENTAL: Analise o TOM e CONTEXTO da resposta antes de tudo.

Exemplos de contextos POSITIVOS que indicam ALTA satisfa√ß√£o:
- Express√µes como "faturei meio milh√£o", "vale muito a pena", "merece 10000", "√© excelente"
- Tom de brincadeira indicando que o resultado foi AL√âM das expectativas
- Mensagens ir√¥nicas ou exageradas que demonstram entusiasmo
- Frases como "nada a melhorar" quando combinadas com elogios

ATEN√á√ÉO: Se a resposta demonstra RESULTADOS CONCRETOS POSITIVOS (ex: faturamento, crescimento), a satisfa√ß√£o deve ser ALTA (8-10).

Analise a seguinte resposta de formul√°rio:

Formul√°rio: ${tipoFormulario}
${mentoradoNome ? `Mentorado: ${mentoradoNome}` : ''}
Resposta: ${JSON.stringify(resposta, null, 2)}

Forne√ßa:
1. N√≠vel de satisfa√ß√£o REAL baseado no TOM da resposta (0-10)
2. Pontos de melhoria (apenas se realmente necess√°rios)
3. Recomenda√ß√µes espec√≠ficas e relevantes
4. Resumo que reflita o VERDADEIRO sentimento do cliente

IMPORTANTE: Responda APENAS em formato JSON v√°lido completo, sem markdown, sem explica√ß√µes extras.

EXEMPLO de resposta correta:
{
  "satisfacao": 8,
  "pontos_melhoria": ["Melhorar comunica√ß√£o"],
  "recomendacoes": ["Fazer follow-up"],
  "resumo": "Cliente satisfeito"
}

Agora analise e retorne SOMENTE o JSON:`

    console.log('ü§ñ Enviando para Gemma3:1b...')

    const response = await fetch('http://localhost:11434/api/generate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'ngrok-skip-browser-warning': 'true'
      },
      body: JSON.stringify({
        model: 'gemma3:1b',
        prompt: contexto,
        stream: false,
        options: {
          temperature: 0.3,
          top_p: 0.9
      }
      })
    })

    if (!response.ok) {
      throw new Error(`Erro na API do Ollama: ${response.status}`)
    }

    const data = await response.json()
    console.log('üìù Resposta bruta do Gemma:', data.response)

    // Tentar extrair JSON da resposta
    let analise
    try {
      // Remove markdown e outros caracteres
      const cleanResponse = data.response
        .replace(/```json/g, '')
        .replace(/```/g, '')
        .trim()

      analise = JSON.parse(cleanResponse)

      // VALIDA√á√ÉO INTELIGENTE: Verificar se a an√°lise da IA faz sentido
      const respostaStr = JSON.stringify(resposta).toLowerCase()

      // Palavras-chave MUITO POSITIVAS que indicam satisfa√ß√£o 9-10
      const muitoPositivo = [
        'faturei', 'milh√£o', 'vale muito a pena', 'merece 10', 'excelente',
        'perfeito', 'incr√≠vel', 'fant√°stico', 'superou expectativas', 'al√©m das expectativas',
        '10000', 'meio milh√£o'
      ]

      // Se detectar palavras muito positivas mas IA deu nota baixa, corrigir
      if (muitoPositivo.some(palavra => respostaStr.includes(palavra)) && analise.satisfacao < 9) {
        console.log('üîß Corrigindo an√°lise da IA - detectado feedback extremamente positivo')
        analise.satisfacao = 10
        analise.pontos_melhoria = ['Cliente extremamente satisfeito - manter o excelente trabalho']
        analise.recomendacoes = [
          'Solicitar depoimento detalhado para case de sucesso',
          'Usar como refer√™ncia para outros clientes',
          'Manter o acompanhamento para garantir continuidade dos resultados'
        ]
        analise.resumo = 'Cliente demonstra alt√≠ssima satisfa√ß√£o com resultados excepcionais. Excelente case de sucesso!'
      }

    } catch (parseError) {
      console.error('Erro ao parsear JSON:', parseError)
      console.log('üìù Resposta original para debug:', data.response)

      // Fallback: an√°lise inteligente baseada em palavras-chave e contexto
      const respostaStr = JSON.stringify(resposta).toLowerCase()
      let satisfacao = 5

      // Palavras-chave MUITO POSITIVAS (9-10)
      const muitoPositivo = [
        'faturei', 'milh√£o', 'vale muito a pena', 'merece 10', 'excelente',
        'perfeito', 'incr√≠vel', 'fant√°stico', 'superou expectativas', 'al√©m das expectativas'
      ]

      // Palavras-chave POSITIVAS (7-8)
      const positivo = [
        'muito bom', '√≥timo', 'bom resultado', 'satisfeito', 'recomendo',
        'ajudou muito', 'valeu a pena', 'funcionou bem'
      ]

      // Palavras-chave NEGATIVAS (1-4)
      const negativo = [
        'ruim', 'p√©ssimo', 'n√£o funcionou', 'insatisfeito', 'decep√ß√£o',
        'n√£o recomendo', 'perda de tempo', 'n√£o valeu'
      ]

      if (muitoPositivo.some(palavra => respostaStr.includes(palavra))) {
        satisfacao = 9
      } else if (positivo.some(palavra => respostaStr.includes(palavra))) {
        satisfacao = 7
      } else if (negativo.some(palavra => respostaStr.includes(palavra))) {
        satisfacao = 3
      }

      // Detectar tom ir√¥nico/brincalh√£o que indica alta satisfa√ß√£o
      if (respostaStr.includes('nada') && (respostaStr.includes('brincadeira') || respostaStr.includes('10000'))) {
        satisfacao = 10
      }

      // Gerar an√°lise contextual baseada na satisfa√ß√£o detectada
      let pontosMelhoria, recomendacoes, resumo

      if (satisfacao >= 9) {
        pontosMelhoria = ['Cliente extremamente satisfeito - manter o excelente trabalho']
        recomendacoes = [
          'Solicitar depoimento detalhado para case de sucesso',
          'Usar como refer√™ncia para outros clientes',
          'Manter o acompanhamento para garantir continuidade dos resultados'
        ]
        resumo = 'Cliente demonstra alt√≠ssima satisfa√ß√£o com resultados excepcionais. Excelente case de sucesso!'
      } else if (satisfacao >= 7) {
        pontosMelhoria = ['Cliente satisfeito - identificar oportunidades de melhoria pontuais']
        recomendacoes = [
          'Realizar follow-up para identificar melhorias espec√≠ficas',
          'Capitalizar sobre os pontos positivos mencionados'
        ]
        resumo = 'Cliente satisfeito com bons resultados. Oportunidade para aprimoramento cont√≠nuo.'
      } else if (satisfacao <= 4) {
        pontosMelhoria = ['Identificar causas espec√≠ficas da insatisfa√ß√£o', 'Revisar processo e expectativas']
        recomendacoes = [
          'Agendar reuni√£o para entender melhor os problemas',
          'Implementar plano de recupera√ß√£o da satisfa√ß√£o'
        ]
        resumo = 'Cliente demonstra insatisfa√ß√£o. A√ß√£o imediata necess√°ria para recuperar a rela√ß√£o.'
      } else {
        pontosMelhoria = ['An√°lise detalhada recomendada para melhor compreens√£o']
        recomendacoes = ['Consultar especialista para an√°lise mais profunda']
        resumo = 'An√°lise autom√°tica realizada. Recomendada revis√£o manual para insights adicionais.'
      }

      analise = { satisfacao, pontos_melhoria: pontosMelhoria, recomendacoes, resumo }
    }

    // Validar estrutura da an√°lise
    if (!analise.satisfacao || !Array.isArray(analise.pontos_melhoria) || !Array.isArray(analise.recomendacoes)) {
      throw new Error('Estrutura de an√°lise inv√°lida')
    }

    // Garantir que satisfa√ß√£o est√° entre 0-10
    analise.satisfacao = Math.max(0, Math.min(10, parseInt(analise.satisfacao) || 5))

    return analise

  } catch (error) {
    console.error('Erro na an√°lise com Gemma:', error)

    // An√°lise de fallback
    return {
      satisfacao: 5,
      pontos_melhoria: ['Erro na an√°lise autom√°tica - revisar manualmente'],
      recomendacoes: ['Verificar resposta e fazer an√°lise manual'],
      resumo: 'An√°lise n√£o p√¥de ser completada automaticamente'
    }
  }
}

export async function POST(request: NextRequest) {
  try {
    const { tipo_formulario, resposta, mentorado_nome } = await request.json()

    if (!tipo_formulario || !resposta) {
      return NextResponse.json(
        { error: 'Par√¢metros obrigat√≥rios: tipo_formulario e resposta' },
        { status: 400 }
      )
    }

    console.log('üîç Analisando formul√°rio:', tipo_formulario)

    const analise = await analisarComGemma(tipo_formulario, resposta, mentorado_nome)

    return NextResponse.json({
      success: true,
      analise
    })

  } catch (error) {
    console.error('Erro na API de an√°lise:', error)
    return NextResponse.json(
      {
        success: false,
        error: 'Erro interno do servidor',
        analise: {
          satisfacao: 5,
          pontos_melhoria: ['Erro no sistema de an√°lise'],
          recomendacoes: ['Tentar novamente ou fazer an√°lise manual'],
          resumo: 'An√°lise n√£o dispon√≠vel devido a erro t√©cnico'
        }
      },
      { status: 500 }
    )
  }
}

export async function GET() {
  return NextResponse.json({
    message: 'API de an√°lise de formul√°rios est√° funcionando',
    timestamp: new Date().toISOString()
  })
}