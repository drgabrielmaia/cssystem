import { supabase } from './supabase'
import { gemmaService } from './gemma-service'

interface AICommandContext {
  intent: string
  entities: any
  action: string
  params: any
}

interface SmartContext {
  needsData: boolean
  queryType: 'search_person' | 'count' | 'list' | 'create' | 'form_analysis' | 'person_forms' | 'general'
  extractedData: any
  naturalResponse: boolean
}

// Interface para pend√™ncias
interface Pendencia {
  id?: string
  mentorado_id: string
  nome_mentorado: string
  valor: number
  mes: string
  status: 'pendente' | 'pago' | 'cancelado'
  descricao?: string
  created_at?: string
}

export async function processAICommand(
  userInput: string,
  conversationContext: any[] = []
): Promise<string> {
  try {
    console.log(`ü§ñ Processando: "${userInput}"`)
    console.log(`üí¨ Contexto: ${conversationContext.length} mensagens anteriores`)

    // Usar Gemma3:1b para entender a inten√ß√£o com contexto completo
    const smartContext = await analyzeWithGemmaAndContext(userInput, conversationContext)

    if (smartContext.needsData) {
      // Buscar dados e usar IA para responder
      return await handleSmartQuery(smartContext, userInput, conversationContext)
    }

    // Para comandos diretos, processar normalmente
    const basicContext = await analyzeUserIntentWithAI(userInput)
    if (basicContext.intent !== 'unknown') {
      return await handleSpecificCommand(basicContext, userInput)
    }

    // Fallback: resposta inteligente geral com contexto
    return await handleGeneralQueryWithAI(userInput, conversationContext)

  } catch (error) {
    console.error('Erro no processamento de comando:', error)
    return 'Desculpe, ocorreu um erro ao processar sua solicita√ß√£o. Tente novamente.'
  }
}

async function analyzeUserIntentWithAI(input: string): Promise<AICommandContext> {
  const context: AICommandContext = {
    intent: 'unknown',
    entities: {},
    action: 'none',
    params: {}
  }

  const inputLower = input.toLowerCase()

  // An√°lise mais espec√≠fica para evitar alucina√ß√µes
  if (inputLower.includes('devendo') || inputLower.includes('deve') || inputLower.includes('pend√™ncia')) {
    if (inputLower.includes('tem') || inputLower.includes('h√°') || inputLower.includes('existe')) {
      context.intent = 'add_pendencia'
      context.action = 'create'
    } else if (inputLower.includes('quem') || inputLower.includes('lista') || inputLower.includes('pendentes')) {
      context.intent = 'list_pendencias'
      context.action = 'list'
    }

    // Extrair entidades com regex
    const valorMatch = input.match(/(\d+(?:\.\d+)?)\s*(?:mil|k|reais)?/i)
    if (valorMatch) {
      let valor = parseFloat(valorMatch[1])
      if (input.includes('mil') || input.includes('k')) {
        valor *= 1000
      }
      context.entities.valor = valor
    }

    const meses = ['janeiro', 'fevereiro', 'mar√ßo', 'abril', 'maio', 'junho',
                   'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro']
    for (const mes of meses) {
      if (inputLower.includes(mes)) {
        context.entities.mes = mes
        break
      }
    }
  }

  else if (inputLower.includes('mentorado') || inputLower.includes('aluno') || inputLower.includes('cliente')) {
    if (inputLower.includes('cadastrar') || inputLower.includes('novo') || inputLower.includes('adicionar')) {
      context.intent = 'add_mentorado'
      context.action = 'create'
    } else if (inputLower.includes('lista') || inputLower.includes('todos')) {
      context.intent = 'list_mentorados'
      context.action = 'list'
    } else if (inputLower.includes('buscar') || inputLower.includes('procurar') || inputLower.includes('tem') || inputLower.includes('existe') || inputLower.includes('h√°')) {
      context.intent = 'search_mentorado'
      context.action = 'search'

      // Extrair nome para busca
      const nomeMatches = [
        input.match(/(?:tem|existe|h√°)\s+(?:o\s+)?(?:mentorado\s+)?([A-Z√Å√ä√Ç√É√á][a-z√°√™√¢√£√ß√µ]+(?:\s+[A-Z√Å√ä√Ç√É√á][a-z√°√™√¢√£√ß√µ]+)*)/i),
        input.match(/(?:buscar|procurar)\s+([A-Z√Å√ä√Ç√É√á][a-z√°√™√¢√£√ß√µ]+(?:\s+[A-Z√Å√ä√Ç√É√á][a-z√°√™√¢√£√ß√µ]+)*)/i),
        input.match(/([A-Z√Å√ä√Ç√É√á][a-z√°√™√¢√£√ß√µ]+(?:\s+[A-Z√Å√ä√Ç√É√á][a-z√°√™√¢√£√ß√µ]+)*)\s+(?:est√°|ta)/i)
      ]

      for (const match of nomeMatches) {
        if (match && match[1]) {
          context.entities.nome = match[1].trim()
          break
        }
      }
    }
  }

  else if (inputLower.includes('quantos') && inputLower.includes('mentorados')) {
    context.intent = 'count_mentorados'
    context.action = 'count'
  }

  else if (inputLower.includes('formul√°rio') || inputLower.includes('form')) {
    context.intent = 'analyze_forms'
    context.action = 'analyze'
  }

  else if (inputLower.includes('insights') || inputLower.includes('relat√≥rio')) {
    context.intent = 'get_insights'
    context.action = 'analyze'
  }

  return context
}

// Nova fun√ß√£o que usa Gemma3:1b para entender linguagem natural com contexto
async function analyzeWithGemmaAndContext(
  userInput: string,
  conversationContext: any[] = []
): Promise<SmartContext> {
  // Fallback para fun√ß√£o original se n√£o houver contexto
  if (conversationContext.length === 0) {
    return analyzeWithGemma(userInput)
  }

  const contextString = conversationContext
    .slice(0, 5) // √öltimas 5 mensagens
    .reverse()
    .map(msg => `${msg.type}: ${msg.message}`)
    .join('\n')

  const prompt = `Analise esta conversa e a nova pergunta do usu√°rio:

CONTEXTO DA CONVERSA:
${contextString}

NOVA PERGUNTA: "${userInput}"

REGRAS IMPORTANTES:
1. S√ì classifique como "search_person" se o usu√°rio EXPLICITAMENTE pedir para buscar uma pessoa
2. S√ì use contexto para pronomes como "ele", "ela" quando h√° refer√™ncia CLARA
3. Para cumprimentos, conversas casuais, ou perguntas vagas, use "general"
4. N√ÉO force buscas de pessoas se n√£o for √≥bvio

Responda APENAS com JSON v√°lido no formato:
{
  "needsData": false,
  "queryType": "general",
  "extractedData": {},
  "naturalResponse": true
}

Tipos poss√≠veis:
- search_person: APENAS para buscas expl√≠citas ("Tem Jo√£o?", "Existe Maria?", "Buscar Pedro")
- count: contagens espec√≠ficas ("Quantos mentorados?", "Total de formul√°rios")
- list: listagens expl√≠citas ("Lista mentorados", "Mostra todos")
- create: cria√ß√£o clara ("Cadastrar Jo√£o Silva", "Adicionar mentorado")
- form_analysis: an√°lise geral de formul√°rios ("Analise formul√°rios", "Quem respondeu?")
- person_forms: formul√°rios de pessoa espec√≠fica ("Formul√°rios do Jo√£o", "Respostas da Maria")
- general: qualquer coisa que n√£o se encaixe claramente acima

Exemplos:
"Oi" ‚Üí {"needsData": false, "queryType": "general", "extractedData": {}, "naturalResponse": true}
"Como vai?" ‚Üí {"needsData": false, "queryType": "general", "extractedData": {}, "naturalResponse": true}
"Fala ae" ‚Üí {"needsData": false, "queryType": "general", "extractedData": {}, "naturalResponse": true}
"Tem mentorado Jo√£o?" ‚Üí {"needsData": true, "queryType": "search_person", "extractedData": {"nome": "Jo√£o"}, "naturalResponse": true}

SEJA CONSERVADOR: Em caso de d√∫vida, use "general" com needsData: false`

  try {
    const response = await gemmaService.customerSuccessQuery(prompt)

    if (response.success) {
      const jsonMatch = response.content.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0])
        console.log('üß† Gemma com contexto entendeu:', parsed)
        return parsed
      }
    }
  } catch (error) {
    console.error('Erro na an√°lise com contexto:', error)
  }

  // Fallback para an√°lise sem contexto
  return analyzeWithGemma(userInput)
}

// Fun√ß√£o original mantida para compatibilidade
async function analyzeWithGemma(userInput: string): Promise<SmartContext> {
  const prompt = `Analise esta pergunta do usu√°rio e identifique a inten√ß√£o:

"${userInput}"

REGRAS IMPORTANTES:
1. S√ì classifique como "search_person" se o usu√°rio EXPLICITAMENTE pedir para buscar uma pessoa
2. Para cumprimentos, conversas casuais, ou perguntas vagas, use "general" com needsData: false
3. N√ÉO force buscas de pessoas se n√£o for √≥bvio
4. Em caso de d√∫vida, use "general"

Responda APENAS com JSON v√°lido no formato:
{
  "needsData": false,
  "queryType": "general",
  "extractedData": {},
  "naturalResponse": true
}

Tipos poss√≠veis:
- search_person: APENAS buscas expl√≠citas ("Tem mentorado Jo√£o?", "Existe Maria?", "Buscar Pedro")
- count: contagens espec√≠ficas ("Quantos mentorados?", "Total de formul√°rios")
- list: listagens expl√≠citas ("Lista mentorados", "Mostra todos")
- create: cria√ß√£o clara ("Cadastrar Jo√£o Silva", "Adicionar mentorado")
- form_analysis: an√°lise geral de formul√°rios ("Analise formul√°rios", "Quem respondeu?")
- person_forms: formul√°rios de pessoa espec√≠fica ("Formul√°rios do Jo√£o", "Quantos formul√°rios o Jo√£o respondeu?")
- general: qualquer coisa que n√£o se encaixe claramente acima (cumprimentos, conversas, perguntas vagas)

Exemplos:
"Oi" ‚Üí {"needsData": false, "queryType": "general", "extractedData": {}, "naturalResponse": true}
"E a√≠?" ‚Üí {"needsData": false, "queryType": "general", "extractedData": {}, "naturalResponse": true}
"Blz" ‚Üí {"needsData": false, "queryType": "general", "extractedData": {}, "naturalResponse": true}
"Como funciona?" ‚Üí {"needsData": false, "queryType": "general", "extractedData": {}, "naturalResponse": true}
"Tem mentorado Jo√£o?" ‚Üí {"needsData": true, "queryType": "search_person", "extractedData": {"nome": "Jo√£o"}, "naturalResponse": true}

SEJA CONSERVADOR: Use "general" quando n√£o tiver certeza.`

  try {
    const response = await gemmaService.customerSuccessQuery(prompt)

    if (response.success) {
      const jsonMatch = response.content.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0])
        console.log('üß† Gemma entendeu:', parsed)
        return parsed
      }
    }
  } catch (error) {
    console.error('Erro na an√°lise com Gemma:', error)
  }

  // Fallback
  return {
    needsData: false,
    queryType: 'general',
    extractedData: {},
    naturalResponse: true
  }
}

// Nova fun√ß√£o para lidar com consultas inteligentes
async function handleSmartQuery(
  context: SmartContext,
  userInput: string,
  conversationContext: any[] = []
): Promise<string> {
  console.log('üéØ Consulta inteligente:', context.queryType)
  console.log('üìù Dados extra√≠dos:', context.extractedData)

  switch (context.queryType) {
    case 'search_person':
      return await handleSmartPersonSearch(context, userInput)
    case 'count':
      return await handleSmartCount(userInput)
    case 'list':
      return await handleSmartList(userInput)
    case 'form_analysis':
      return await handleFormAnalysis(userInput)
    case 'person_forms':
      return await handlePersonForms(context, userInput)
    default:
      return await handleGeneralQueryWithAI(userInput, conversationContext)
  }
}

// Busca inteligente de pessoa
async function handleSmartPersonSearch(context: SmartContext, userInput: string): Promise<string> {
  const nome = context.extractedData?.nome

  if (!nome) {
    return "N√£o consegui identificar o nome da pessoa que voc√™ est√° procurando. Poderia reformular?"
  }

  console.log(`üîç Buscando: "${nome}"`)

  try {
    const { data: mentorados, error } = await supabase
      .from('mentorados')
      .select('*')
      .or(`nome_completo.ilike.%${nome}%,email.ilike.%${nome}%`)

    if (error) {
      return `Erro ao buscar: ${error.message}`
    }

    // Usar Gemma3:1b para resposta natural
    const resultPrompt = `O usu√°rio perguntou: "${userInput}"

Resultado da busca no banco de dados:
- Nome procurado: "${nome}"
- Encontrados: ${mentorados?.length || 0} resultados
${mentorados?.length ? `
Dados encontrados:
${mentorados.map(m => `- ${m.nome_completo} (${m.email}) - ${m.turma}`).join('\n')}
` : ''}

Responda de forma natural e conversacional, como um assistente humano responderia.
Se encontrou pessoas, diga quem s√£o.
Se n√£o encontrou, diga que n√£o existe e ofere√ßa ajuda para cadastrar.
Use emojis apropriados.`

    const response = await gemmaService.customerSuccessQuery(resultPrompt)

    if (response.success) {
      return response.content
    }

    // Fallback
    if (!mentorados || mentorados.length === 0) {
      return `N√£o, n√£o temos nenhum mentorado chamado "${nome}" cadastrado. Quer que eu cadastre?`
    } else {
      return `Sim! Encontrei ${mentorados.length} pessoa(s): ${mentorados.map(m => m.nome_completo).join(', ')}`
    }

  } catch (error) {
    return `Erro ao consultar: ${error instanceof Error ? error.message : 'Erro desconhecido'}`
  }
}

// Contagem inteligente
async function handleSmartCount(userInput: string): Promise<string> {
  try {
    const { count, error } = await supabase
      .from('mentorados')
      .select('count', { count: 'exact' })

    if (error) {
      return `Erro ao contar: ${error.message}`
    }

    const countPrompt = `O usu√°rio perguntou: "${userInput}"

Dados reais do sistema:
- Total de mentorados: ${count || 0}

Responda de forma natural e conversacional, incluindo o n√∫mero exato.
Use emojis apropriados.`

    const response = await gemmaService.customerSuccessQuery(countPrompt)

    if (response.success) {
      return response.content
    }

    return `Temos ${count || 0} mentorados cadastrados no sistema.`

  } catch (error) {
    return `Erro ao buscar dados: ${error instanceof Error ? error.message : 'Erro desconhecido'}`
  }
}

// Listagem inteligente
async function handleSmartList(userInput: string): Promise<string> {
  try {
    const { data: mentorados, error } = await supabase
      .from('mentorados')
      .select('*')
      .order('nome_completo')
      .limit(20)

    if (error) {
      return `Erro ao listar: ${error.message}`
    }

    const listPrompt = `O usu√°rio pediu: "${userInput}"

Dados reais do sistema:
Total de mentorados: ${mentorados?.length || 0}

Primeiros mentorados:
${mentorados?.slice(0, 10).map(m => `- ${m.nome_completo} (${m.email}) - ${m.turma || 'Turma n√£o informada'}`).join('\n') || 'Nenhum mentorado cadastrado'}

Responda de forma natural listando os mentorados de forma organizada.
Use emojis e formata√ß√£o clara.
Se houver muitos, mostre os primeiros e mencione o total.`

    const response = await gemmaService.customerSuccessQuery(listPrompt)

    if (response.success) {
      return response.content
    }

    // Fallback
    if (!mentorados || mentorados.length === 0) {
      return "N√£o h√° mentorados cadastrados ainda."
    }

    return `Aqui est√£o os mentorados:\n\n${mentorados.slice(0, 10).map((m, i) =>
      `${i + 1}. ${m.nome_completo} (${m.email})`
    ).join('\n')}`

  } catch (error) {
    return `Erro ao listar: ${error instanceof Error ? error.message : 'Erro desconhecido'}`
  }
}

// An√°lise completa de formul√°rios
async function handleFormAnalysis(userInput: string): Promise<string> {
  try {
    console.log('üìã Analisando formul√°rios...')

    // Buscar dados completos dos formul√°rios
    const [respostasResult, mentoradosResult] = await Promise.all([
      supabase
        .from('formularios_respostas')
        .select('*')
        .order('data_envio', { ascending: false }),
      supabase
        .from('mentorados')
        .select('*')
    ])

    if (respostasResult.error) {
      return `Erro ao buscar formul√°rios: ${respostasResult.error.message}`
    }

    const respostas = respostasResult.data || []
    const mentorados = mentoradosResult.data || []

    // Criar mapa de mentorados para enriquecer dados
    const mentoradosMap = new Map(mentorados.map(m => [m.id, m]))

    // An√°lise detalhada
    const analytics = {
      total_respostas: respostas.length,
      total_pessoas_responderam: new Set(respostas.map(r => r.mentorado_id)).size,
      tipos_formulario: respostas.reduce((acc, r) => {
        acc[r.formulario] = (acc[r.formulario] || 0) + 1
        return acc
      }, {} as Record<string, number>),
      respostas_por_pessoa: respostas.reduce((acc, r) => {
        const mentorado = mentoradosMap.get(r.mentorado_id)
        const nome = mentorado?.nome_completo || 'Desconhecido'
        acc[nome] = (acc[nome] || 0) + 1
        return acc
      }, {} as Record<string, number>),
      ultimas_respostas: respostas.slice(0, 10).map(r => {
        const mentorado = mentoradosMap.get(r.mentorado_id)
        return {
          nome: mentorado?.nome_completo || 'Desconhecido',
          formulario: r.formulario,
          data: r.data_envio,
          preview: Object.keys(r.resposta_json?.respostas || {}).slice(0, 3)
        }
      }),
      pessoas_mais_ativas: Object.entries(respostas.reduce((acc, r) => {
        const mentorado = mentoradosMap.get(r.mentorado_id)
        const nome = mentorado?.nome_completo || 'Desconhecido'
        acc[nome] = (acc[nome] || 0) + 1
        return acc
      }, {} as Record<string, number>))
        .sort(([,a], [,b]) => (b as number) - (a as number))
        .slice(0, 5)
    }

    // Usar Gemma3:1b para an√°lise inteligente
    const analysisPrompt = `O usu√°rio perguntou: "${userInput}"

DADOS REAIS DOS FORMUL√ÅRIOS:

üìä **Resumo Geral:**
- Total de respostas: ${analytics.total_respostas}
- Total de pessoas que responderam: ${analytics.total_pessoas_responderam}

üìã **Tipos de formul√°rio:**
${Object.entries(analytics.tipos_formulario).map(([tipo, count]) => `- ${tipo}: ${count} respostas`).join('\n')}

üë• **Top 5 pessoas mais ativas:**
${analytics.pessoas_mais_ativas.map(([nome, count], i) => `${i + 1}. ${nome}: ${count} respostas`).join('\n')}

üìù **√öltimas respostas:**
${analytics.ultimas_respostas.map((r, i) => `${i + 1}. ${r.nome} - ${r.formulario} (${new Date(r.data).toLocaleDateString('pt-BR')})`).join('\n')}

**INSTRU√á√ïES:**
- Analise estes dados REAIS de forma inteligente
- Forne√ßa insights sobre participa√ß√£o, engajamento e padr√µes
- Identifique oportunidades e pontos de aten√ß√£o
- Seja espec√≠fico e √∫til
- Use emojis e formata√ß√£o clara
- Responda de forma natural e conversacional`

    const response = await gemmaService.analyzeCustomerData(analytics)

    if (response.success) {
      return response.content
    }

    // Fallback estruturado
    return `üìä **An√°lise de Formul√°rios:**

‚úÖ **Participa√ß√£o:**
- ${analytics.total_respostas} respostas coletadas
- ${analytics.total_pessoas_responderam} pessoas participaram

üìã **Formul√°rios mais respondidos:**
${Object.entries(analytics.tipos_formulario)
  .sort(([,a], [,b]) => (b as number) - (a as number))
  .slice(0, 5)
  .map(([tipo, count]) => `‚Ä¢ ${tipo}: ${count} respostas`)
  .join('\n')}

üèÜ **Pessoas mais engajadas:**
${analytics.pessoas_mais_ativas.map(([nome, count]) => `‚Ä¢ ${nome}: ${count} respostas`).join('\n')}

üìà **Insights:**
- Taxa de participa√ß√£o: ${((analytics.total_pessoas_responderam / mentorados.length) * 100).toFixed(1)}% dos mentorados
- M√©dia por pessoa: ${(analytics.total_respostas / analytics.total_pessoas_responderam).toFixed(1)} respostas`

  } catch (error) {
    console.error('Erro na an√°lise de formul√°rios:', error)
    return `Erro ao analisar formul√°rios: ${error instanceof Error ? error.message : 'Erro desconhecido'}`
  }
}

// An√°lise de formul√°rios de pessoa espec√≠fica
async function handlePersonForms(context: SmartContext, userInput: string): Promise<string> {
  const nome = context.extractedData?.nome

  if (!nome) {
    return "N√£o consegui identificar de qual pessoa voc√™ quer ver os formul√°rios. Poderia especificar?"
  }

  console.log(`üìã Buscando formul√°rios de: "${nome}"`)

  try {
    // Buscar mentorado
    const { data: mentorado, error: mentoradoError } = await supabase
      .from('mentorados')
      .select('*')
      .ilike('nome_completo', `%${nome}%`)
      .single()

    if (mentoradoError || !mentorado) {
      return `N√£o encontrei mentorado com o nome "${nome}". Verifique se o nome est√° correto.`
    }

    // Buscar respostas deste mentorado
    const { data: respostas, error: respostasError } = await supabase
      .from('formularios_respostas')
      .select('*')
      .eq('mentorado_id', mentorado.id)
      .order('data_envio', { ascending: false })

    if (respostasError) {
      return `Erro ao buscar formul√°rios: ${respostasError.message}`
    }

    if (!respostas || respostas.length === 0) {
      return `${mentorado.nome_completo} ainda n√£o respondeu nenhum formul√°rio.`
    }

    // An√°lise das respostas da pessoa
    const personAnalytics = {
      mentorado: {
        nome: mentorado.nome_completo,
        email: mentorado.email,
        turma: mentorado.turma,
        data_entrada: mentorado.data_entrada
      },
      total_respostas: respostas.length,
      formularios_respondidos: respostas.reduce((acc, r) => {
        acc[r.formulario] = (acc[r.formulario] || 0) + 1
        return acc
      }, {} as Record<string, number>),
      primeira_resposta: respostas[respostas.length - 1]?.data_envio,
      ultima_resposta: respostas[0]?.data_envio,
      respostas_detalhadas: respostas.map(r => ({
        formulario: r.formulario,
        data: r.data_envio,
        perguntas_respondidas: Object.keys(r.resposta_json?.respostas || {}).length,
        preview: Object.values(r.resposta_json?.respostas || {}).slice(0, 2)
      }))
    }

    // Usar Gemma3:1b para an√°lise personalizada
    const personPrompt = `O usu√°rio perguntou: "${userInput}" sobre os formul√°rios de ${mentorado.nome_completo}

DADOS REAIS DO MENTORADO:

üë§ **Perfil:**
- Nome: ${personAnalytics.mentorado.nome}
- Email: ${personAnalytics.mentorado.email}
- Turma: ${personAnalytics.mentorado.turma}
- Entrada: ${new Date(personAnalytics.mentorado.data_entrada).toLocaleDateString('pt-BR')}

üìä **Atividade nos Formul√°rios:**
- Total de respostas: ${personAnalytics.total_respostas}
- Primeira resposta: ${new Date(personAnalytics.primeira_resposta).toLocaleDateString('pt-BR')}
- √öltima resposta: ${new Date(personAnalytics.ultima_resposta).toLocaleDateString('pt-BR')}

üìã **Formul√°rios respondidos:**
${Object.entries(personAnalytics.formularios_respondidos).map(([tipo, count]) => `- ${tipo}: ${count}x`).join('\n')}

üìù **Hist√≥rico das respostas:**
${personAnalytics.respostas_detalhadas.map((r, i) =>
  `${i + 1}. ${r.formulario} - ${new Date(r.data).toLocaleDateString('pt-BR')} (${r.perguntas_respondidas} perguntas)`
).join('\n')}

**INSTRU√á√ïES:**
- Analise o perfil e engajamento desta pessoa
- Identifique padr√µes de participa√ß√£o
- Sugira a√ß√µes espec√≠ficas se necess√°rio
- Seja pessoal e espec√≠fico sobre esta pessoa
- Use emojis e formata√ß√£o clara`

    const response = await gemmaService.customerSuccessQuery(personPrompt)

    if (response.success) {
      return response.content
    }

    // Fallback
    return `üìã **Formul√°rios de ${mentorado.nome_completo}:**

üìä **Resumo:**
- ${personAnalytics.total_respostas} formul√°rios respondidos
- Primeira resposta: ${new Date(personAnalytics.primeira_resposta).toLocaleDateString('pt-BR')}
- √öltima resposta: ${new Date(personAnalytics.ultima_resposta).toLocaleDateString('pt-BR')}

üìù **Tipos respondidos:**
${Object.entries(personAnalytics.formularios_respondidos).map(([tipo, count]) => `‚Ä¢ ${tipo}: ${count} vezes`).join('\n')}

üëç **Status:** ${personAnalytics.total_respostas > 3 ? 'Muito engajado' : personAnalytics.total_respostas > 1 ? 'Moderadamente ativo' : 'Baixo engajamento'}`

  } catch (error) {
    console.error('Erro ao buscar formul√°rios da pessoa:', error)
    return `Erro ao buscar formul√°rios: ${error instanceof Error ? error.message : 'Erro desconhecido'}`
  }
}

// Fun√ß√£o para gerar insights proativos autom√°ticos
async function generateProactiveInsights(
  userInput: string,
  mentorados: any[],
  formularios: any[],
  mentoradosMap: Map<string, any>
): Promise<any> {
  try {
    // An√°lises autom√°ticas dos padr√µes
    const analytics = {
      engajamento: {
        mentorados_ativos: mentorados.filter(m => m.estado_atual === 'ativo').length,
        mentorados_inativos: mentorados.filter(m => m.estado_atual === 'inativo').length,
        taxa_engajamento: formularios.length > 0 ?
          new Set(formularios.map(f => f.mentorado_id)).size / mentorados.length : 0
      },
      formularios: {
        total: formularios.length,
        pessoas_responderam: new Set(formularios.map(f => f.mentorado_id)).size,
        tipos_mais_respondidos: formularios.reduce((acc, f) => {
          acc[f.formulario] = (acc[f.formulario] || 0) + 1
          return acc
        }, {} as Record<string, number>),
        ultima_resposta: formularios[0]?.data_envio,
        pessoas_sem_resposta: mentorados.filter(m =>
          !formularios.some(f => f.mentorado_id === m.id)
        ).length
      },
      alertas: [] as any[],
      oportunidades: [] as any[],
      sugestoes_acao: [] as any[]
    }

    // Detectar alertas autom√°ticos
    if (analytics.formularios.pessoas_sem_resposta > 0) {
      analytics.alertas.push({
        tipo: 'baixo_engajamento',
        message: `${analytics.formularios.pessoas_sem_resposta} mentorados nunca responderam formul√°rios`,
        prioridade: 'alta'
      })
    }

    if (analytics.engajamento.taxa_engajamento < 0.5) {
      analytics.alertas.push({
        tipo: 'taxa_baixa',
        message: `Taxa de engajamento baixa: ${(analytics.engajamento.taxa_engajamento * 100).toFixed(1)}%`,
        prioridade: 'media'
      })
    }

    // Detectar oportunidades
    const tiposFormularios = Object.entries(analytics.formularios.tipos_mais_respondidos)
      .sort(([,a], [,b]) => (b as number) - (a as number))

    if (tiposFormularios.length > 0) {
      analytics.oportunidades.push({
        tipo: 'formulario_popular',
        message: `${tiposFormularios[0][0]} √© o mais respondido (${tiposFormularios[0][1]} respostas)`,
        acao: 'Criar mais formul√°rios similares'
      })
    }

    // Sugest√µes de a√ß√£o proativas
    analytics.sugestoes_acao = [
      'Enviar lembrete para mentorados inativos',
      'Criar campanha de engajamento',
      'Analisar feedback dos formul√°rios mais respondidos',
      'Identificar padr√µes de sucesso nos mentorados ativos'
    ]

    return analytics

  } catch (error) {
    console.error('Erro na an√°lise proativa:', error)
    return {
      engajamento: {},
      formularios: {},
      alertas: [],
      oportunidades: [],
      sugestoes_acao: []
    }
  }
}

async function handleSpecificCommand(context: AICommandContext, userInput: string): Promise<string> {
  switch (context.intent) {
    case 'add_pendencia':
      return await handleAddPendencia(context, userInput)
    case 'list_pendencias':
      return await handleListPendencias(context)
    case 'list_mentorados':
      return await handleListMentorados(context)
    case 'count_mentorados':
      return await handleCountMentorados(userInput)
    case 'add_mentorado':
      return await handleAddMentorado(context, userInput)
    case 'search_mentorado':
      return await handleSearchMentorado(context, userInput)
    case 'analyze_forms':
      return await handleAnalyzeForms(context, userInput)
    case 'get_insights':
      return await handleGetInsights(context, userInput)
    default:
      return await handleGeneralQueryWithAI(userInput)
  }
}

async function handleCountMentorados(userInput: string): Promise<string> {
  try {
    // Buscar dados reais do banco
    const { data: mentorados, error } = await supabase
      .from('mentorados')
      .select('*')

    if (error) {
      return `Erro ao buscar dados: ${error.message}`
    }

    // Estat√≠sticas simples e diretas
    const porTurma = mentorados?.reduce((acc, m) => {
      acc[m.turma] = (acc[m.turma] || 0) + 1
      return acc
    }, {} as Record<string, number>) || {}
    
    const porEstado = mentorados?.reduce((acc, m) => {
      acc[m.estado_atual] = (acc[m.estado_atual] || 0) + 1
      return acc
    }, {} as Record<string, number>) || {}

    const prompt = `Pergunta: "${userInput}"

DADOS REAIS DO SISTEMA:
Total: ${mentorados?.length || 0} mentorados

Por turma: ${Object.entries(porTurma).map(([turma, count]) => `${turma}: ${count}`).join(', ')}

Por estado: ${Object.entries(porEstado).map(([estado, count]) => `${estado}: ${count}`).join(', ')}

Responda APENAS baseado nestes n√∫meros reais. Use markdown para formata√ß√£o.`

    const response = await gemmaService.customerSuccessQuery(prompt)
    
    if (response.success) {
      return response.content
    } else {
      // Fallback se IA falhar
      const porTurma = mentorados?.reduce((acc, m) => {
        acc[m.turma] = (acc[m.turma] || 0) + 1
        return acc
      }, {} as Record<string, number>) || {}
      
      let resultado = `üìä **Total de Mentorados: ${mentorados?.length || 0}**\n\n`
      
      if (Object.keys(porTurma).length > 0) {
        resultado += 'üìö **Por Turma:**\n'
        Object.entries(porTurma).forEach(([turma, count]) => {
          resultado += `‚Ä¢ ${turma}: ${count} mentorados\n`
        })
      }
      
      return resultado
    }
  } catch (error) {
    console.error('Erro ao contar mentorados:', error)
    return 'Erro ao buscar informa√ß√µes dos mentorados.'
  }
}

async function handleListMentorados(context: AICommandContext): Promise<string> {
  try {
    const { data: mentorados, error } = await supabase
      .from('mentorados')
      .select('*')
      .order('nome_completo')

    if (error) {
      return `Erro ao buscar mentorados: ${error.message}`
    }

    if (!mentorados || mentorados.length === 0) {
      return 'üì≠ N√£o h√° mentorados cadastrados no sistema.'
    }

    // Usar IA para formatar apenas os primeiros mentorados
    const primeiros = mentorados.slice(0, 5).map(m => ({
      nome: m.nome_completo,
      email: m.email,
      turma: m.turma,
      estado: m.estado_atual
    }))

    const prompt = `Liste os mentorados do sistema:

DADOS REAIS:
Total: ${mentorados.length} mentorados
Primeiros 5:
${primeiros.map(m => `- **${m.nome}** (${m.email}) - ${m.turma} - ${m.estado}`).join('\n')}

Responda APENAS baseado nestes dados. Use formata√ß√£o markdown. Seja direto.`

    const response = await gemmaService.customerSuccessQuery(prompt)
    
    if (response.success) {
      return response.content
    } else {
      // Fallback
      let resultado = `üë• **Lista de Mentorados (${mentorados.length} total):**\n\n`
      mentorados.slice(0, 10).forEach((m, i) => {
        resultado += `${i + 1}. **${m.nome_completo}**\n   üìß ${m.email}\n   üéì ${m.turma}\n   üìä ${m.estado_atual}\n\n`
      })
      
      if (mentorados.length > 10) {
        resultado += `... e mais ${mentorados.length - 10} mentorados.\n`
      }
      
      return resultado
    }
  } catch (error) {
    console.error('Erro ao listar mentorados:', error)
    return 'Erro ao buscar mentorados.'
  }
}

async function handleAnalyzeForms(context: AICommandContext, userInput: string): Promise<string> {
  try {
    const { data: respostas, error } = await supabase
.from('formularios_respostas')
      .select('*')
      .order('data_envio', { ascending: false })
      .limit(50)

    if (error) {
      return `Erro ao buscar respostas: ${error.message}`
    }

    if (!respostas || respostas.length === 0) {
      return 'üìÑ N√£o h√° respostas de formul√°rios para analisar.'
    }

    // Usar IA para an√°lise inteligente
    const dadosParaIA = {
      total_respostas: respostas.length,
      tipos_formulario: respostas.reduce((acc, r) => {
        acc[r.formulario] = (acc[r.formulario] || 0) + 1
        return acc
      }, {} as Record<string, number>),
      respostas_recentes: respostas.slice(0, 5).map(r => ({
        formulario: r.formulario,
        data: r.data_envio,
        resposta: r.resposta_json
      })),
      pergunta_original: userInput
    }

    const prompt = `Analise estes dados de formul√°rios de forma inteligente:

${JSON.stringify(dadosParaIA, null, 2)}

Usu√°rio perguntou: "${userInput}"

Forne√ßa insights valiosos, identifique padr√µes, tend√™ncias e d√™ recomenda√ß√µes pr√°ticas. Seja espec√≠fico e √∫til.`

    const response = await gemmaService.analyzeCustomerData(dadosParaIA)
    
    if (response.success) {
      return response.content
    } else {
      return `üìä **An√°lise de Formul√°rios (${respostas.length} respostas):**\n\nErro na an√°lise IA: ${response.error}`
    }
  } catch (error) {
    console.error('Erro ao analisar formul√°rios:', error)
    return 'Erro ao analisar formul√°rios.'
  }
}

async function handleGetInsights(context: AICommandContext, userInput: string): Promise<string> {
  try {
    // Buscar todos os dados do sistema
    const [mentorados, respostas, checkins] = await Promise.all([
      supabase.from('mentorados').select('*'),
      supabase.from('formularios_respostas').select('*'),
      supabase.from('checkins').select('*').limit(100)
    ])

    // Pend√™ncias simuladas (em uma aplica√ß√£o real, buscar√≠amos do banco)
    let pendencias = [
      { nome_mentorado: 'Jo√£o Silva', valor: 5000, mes: 'outubro', status: 'pendente' },
      { nome_mentorado: 'Maria Santos', valor: 3500, mes: 'setembro', status: 'pendente' }
    ]

    const dadosCompletos = {
      mentorados: {
        total: mentorados.data?.length || 0,
        por_estado: mentorados.data?.reduce((acc, m) => {
          acc[m.estado_atual] = (acc[m.estado_atual] || 0) + 1
          return acc
        }, {} as Record<string, number>) || {},
        por_turma: mentorados.data?.reduce((acc, m) => {
          acc[m.turma] = (acc[m.turma] || 0) + 1
          return acc
        }, {} as Record<string, number>) || {}
      },
      formularios: {
        total: respostas.data?.length || 0,
        por_tipo: respostas.data?.reduce((acc, r) => {
          acc[r.formulario] = (acc[r.formulario] || 0) + 1
          return acc
        }, {} as Record<string, number>) || {}
      },
      checkins: {
        total: checkins.data?.length || 0,
        por_status: checkins.data?.reduce((acc, c) => {
          acc[c.status] = (acc[c.status] || 0) + 1
          return acc
        }, {} as Record<string, number>) || {}
      },
      pendencias: {
        total: pendencias.length,
        valor_total: pendencias.reduce((sum, p) => sum + (p.valor || 0), 0)
      },
      pergunta_original: userInput
    }

    const prompt = `Forne√ßa insights completos e valiosos baseados nestes dados do sistema de Customer Success:

${JSON.stringify(dadosCompletos, null, 2)}

Usu√°rio perguntou: "${userInput}"

Analise os dados profundamente e forne√ßa:
1. Vis√£o geral da sa√∫de do neg√≥cio
2. Pontos de aten√ß√£o e riscos
3. Oportunidades identificadas
4. Recomenda√ß√µes espec√≠ficas e acion√°veis
5. M√©tricas-chave e tend√™ncias

Seja espec√≠fico, pr√°tico e √∫til. Use emojis e formata√ß√£o clara.`

    const response = await gemmaService.analyzeCustomerData(dadosCompletos)
    
    if (response.success) {
      return response.content
    } else {
      return `üìä **Insights do Sistema:**\n\nErro na an√°lise IA: ${response.error}\n\nDados dispon√≠veis: ${mentorados.data?.length || 0} mentorados, ${respostas.data?.length || 0} respostas de formul√°rios, ${pendencias.length} pend√™ncias.`
    }
  } catch (error) {
    console.error('Erro ao gerar insights:', error)
    return 'Erro ao gerar insights.'
  }
}

async function handleGeneralQueryWithAI(
  userInput: string,
  conversationContext: any[] = []
): Promise<string> {
  console.log(`üîç Consulta geral: "${userInput}"`)
  console.log(`üí¨ Usando contexto de ${conversationContext.length} mensagens`)

  try {
    // SEMPRE buscar dados completos para an√°lises proativas
    const [mentoradosResult, respostasResult, mentoradosDetails, formulariosDetails] = await Promise.all([
      supabase.from('mentorados').select('count', { count: 'exact' }),
      supabase.from('formularios_respostas').select('count', { count: 'exact' }),
      supabase.from('mentorados').select('*').limit(100),
      supabase.from('formularios_respostas').select('*').order('data_envio', { ascending: false }).limit(50)
    ])

    console.log(`üìä Dados reais encontrados: ${mentoradosResult.count || 0} mentorados`)

    // Se for pergunta sobre um mentorado espec√≠fico, fazer busca espec√≠fica
    if (userInput.toLowerCase().includes('tem') || userInput.toLowerCase().includes('existe') || userInput.toLowerCase().includes('h√°')) {
      // Extrair poss√≠vel nome
      const nomeMatch = userInput.match(/(?:tem|existe|h√°)\s+(?:o\s+)?(?:mentorado\s+)?([A-Z√Å√ä√Ç√É√á][a-z√°√™√¢√£√ß√µ]+(?:\s+[A-Z√Å√ä√Ç√É√á][a-z√°√™√¢√£√ß√µ]+)*)/i)
      if (nomeMatch && nomeMatch[1]) {
        const nome = nomeMatch[1].trim()
        console.log(`üîç Pergunta espec√≠fica sobre: "${nome}"`)

        const { data: mentoradosEncontrados } = await supabase
          .from('mentorados')
          .select('*')
          .or(`nome_completo.ilike.%${nome}%,email.ilike.%${nome}%`)

        if (!mentoradosEncontrados || mentoradosEncontrados.length === 0) {
          return `‚ùå **N√£o**, n√£o existe mentorado chamado "${nome}" no sistema.

üìã **Consulta realizada:** Base real de mentorados (${mentoradosResult.count || 0} total)
üîç **Verifica√ß√£o:** Nome e email
‚è∞ **Consultado em:** ${new Date().toLocaleString('pt-BR')}

Para cadastrar: "Cadastrar ${nome}, email usuario@email.com"`
        } else {
          return `‚úÖ **Sim**, encontrei ${mentoradosEncontrados.length} mentorado(s) com o nome "${nome}":

${mentoradosEncontrados.map((m, i) =>
  `${i + 1}. **${m.nome_completo}** (${m.email}) - ${m.turma}`
).join('\n')}

üìã **Consulta realizada:** ${new Date().toLocaleString('pt-BR')}`
        }
      }
    }

    let pendenciasCount = 2 // Simulando pend√™ncias existentes

    // An√°lise proativa dos dados
    const mentorados = mentoradosDetails.data || []
    const formularios = formulariosDetails.data || []

    // Criar mapa de mentorados para an√°lises
    const mentoradosMap = new Map(mentorados.map(m => [m.id, m]))

    // An√°lises proativas autom√°ticas
    const proactiveAnalysis = await generateProactiveInsights(
      userInput,
      mentorados,
      formularios,
      mentoradosMap
    )

    // Para outras consultas, usar contexto real mas restringir a IA
    const contextoReal = {
      total_mentorados: mentoradosResult.count || 0,
      total_formularios: respostasResult.count || 0,
      total_pendencias: pendenciasCount,
      mentorados_sample: mentorados.slice(0, 5).map(m => ({
        nome: m.nome_completo,
        email: m.email,
        turma: m.turma,
        status: m.estado_atual
      })),
      insights_proativos: proactiveAnalysis,
      conversa_anterior: conversationContext.slice(0, 5).map(msg => ({
        tipo: msg.type,
        mensagem: msg.message,
        quando: msg.timestamp
      })),
      timestamp_consulta: new Date().toISOString()
    }

    const prompt = `Voc√™ √© um assistente de Customer Success conversacional e amig√°vel.

CONTEXTO DO SISTEMA:
${JSON.stringify(contextoReal, null, 2)}

PERGUNTA DO USU√ÅRIO: "${userInput}"

INSTRU√á√ïES:
1. Responda de forma natural e conversacional
2. Para cumprimentos ou conversa casual, seja amig√°vel sem mencionar dados
3. Para perguntas t√©cnicas, use os dados fornecidos
4. Se n√£o souber algo espec√≠fico, seja honesto mas ofere√ßa ajuda
5. Use emojis quando apropriado
6. Seja √∫til e proativo

EXEMPLOS DE RESPOSTAS:
- Para "Oi" ‚Üí "Oi! Como posso ajudar voc√™ hoje? üòä"
- Para "E a√≠?" ‚Üí "E a√≠! Tudo bem? Posso te ajudar com alguma coisa do sistema?"
- Para "Como funciona?" ‚Üí "Posso te explicar! Sou um assistente que ajuda com mentorados, formul√°rios e an√°lises. O que voc√™ gostaria de saber?"

Responda de forma natural e humana, n√£o como um rob√¥ t√©cnico.`

    const response = await gemmaService.customerSuccessQuery(prompt)

    if (response.success) {
      // Remover timestamp desnecess√°rio para conversas casuais
      if (userInput.toLowerCase().match(/^(oi|ol√°|e a√≠|eai|hey|opa|fala|blz|beleza)$/)) {
        return response.content
      }
      return response.content
    } else {
      // Fallback mais amig√°vel
      const input = userInput.toLowerCase()

      if (input.match(/^(oi|ol√°|e a√≠|eai|hey|opa|fala|blz|beleza)$/)) {
        return `Oi! üòä Sou seu assistente de Customer Success. Como posso ajudar voc√™ hoje?

Posso te ajudar com:
‚Ä¢ Informa√ß√µes sobre mentorados
‚Ä¢ An√°lise de formul√°rios
‚Ä¢ Cadastros e buscas
‚Ä¢ Insights do sistema

O que voc√™ gostaria de saber?`
      }

      if (input.includes('como') && (input.includes('funciona') || input.includes('usar'))) {
        return `Te explico! ü§ñ Sou um assistente inteligente que te ajuda com:

üìä **Mentorados:** "Quantos mentorados temos?", "Buscar Jo√£o"
üìã **Formul√°rios:** "Quem respondeu formul√°rios?", "Formul√°rios do Jo√£o"
‚ûï **Cadastros:** "Cadastrar Maria Silva, email maria@email.com"
üìà **Insights:** "Analise o engajamento", "Relat√≥rio geral"

S√≥ falar comigo de forma natural! O que voc√™ quer saber?`
      }

      return `N√£o entendi bem... ü§î Mas posso te ajudar com v√°rias coisas!

**Exemplos do que posso fazer:**
‚Ä¢ "Quantos mentorados temos?"
‚Ä¢ "Tem mentorado Jo√£o Silva?"
‚Ä¢ "Quem respondeu formul√°rios?"
‚Ä¢ "Cadastrar novo mentorado"

Tenta reformular ou me diz o que voc√™ precisa! üòä`
    }
  } catch (error) {
    console.error('Erro na consulta geral:', error)
    return `Erro ao consultar a base de dados: ${error instanceof Error ? error.message : 'Erro desconhecido'}`
  }
}

// Implementa√ß√µes simplificadas das outras fun√ß√µes (mant√©m a funcionalidade)
async function handleAddPendencia(context: AICommandContext, userInput: string): Promise<string> {
  const { valor, mes } = context.entities
  
  if (!valor || !mes) {
    return `Preciso de mais informa√ß√µes. Exemplo: "Jo√£o Silva est√° devendo 5000 reais do m√™s de outubro"`
  }

  const nomeMatch = userInput.match(/([A-Z√Å√ä√Ç√É√á][a-z√°√™√¢√£√ß√µ]+(?:\s+[A-Z√Å√ä√Ç√É√á][a-z√°√™√¢√£√ß√µ]+)*)/g)
  const possiveisNomes = nomeMatch?.filter(nome => 
    !['tem', 'que', 'est√°', 'devendo', 'reais', 'mil', 'm√™s'].includes(nome.toLowerCase())
  )

  if (!possiveisNomes || possiveisNomes.length === 0) {
    return `Qual √© o nome da pessoa que deve R$ ${valor.toLocaleString('pt-BR', { minimumFractionDigits: 2 })} de ${mes}?`
  }

  const nome = possiveisNomes[0]
  
  try {
    const { data: mentorado } = await supabase
      .from('mentorados')
      .select('*')
      .ilike('nome_completo', `%${nome}%`)
      .single()

    if (!mentorado) {
      return `N√£o encontrei "${nome}" nos mentorados. Verifique o nome ou cadastre primeiro.`
    }

    const pendencia: Pendencia = {
      mentorado_id: mentorado.id,
      nome_mentorado: mentorado.nome_completo,
      valor: valor,
      mes: mes,
      status: 'pendente',
      created_at: new Date().toISOString()
    }

    // Em uma aplica√ß√£o real, salvaria no banco de dados
    // Por enquanto, apenas simular que foi salvo

    return `‚úÖ **Pend√™ncia registrada!**

üìã **Detalhes:**
- **Nome:** ${mentorado.nome_completo}
- **Valor:** R$ ${valor.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
- **M√™s:** ${mes}
- **Status:** Pendente

Pend√™ncia salva no sistema.`
  } catch (error) {
    return 'Erro ao registrar pend√™ncia.'
  }
}

async function handleListPendencias(context: AICommandContext): Promise<string> {
  try {
    // Simulando pend√™ncias (em uma aplica√ß√£o real, buscar√≠amos do banco)
    let pendencias = [
      { nome_mentorado: 'Jo√£o Silva', valor: 5000, mes: 'outubro', status: 'pendente' },
      { nome_mentorado: 'Maria Santos', valor: 3500, mes: 'setembro', status: 'pendente' }
    ]

    // Usar IA para formatar resposta
    const prompt = `Liste estas pend√™ncias de forma organizada e clara:

${JSON.stringify(pendencias, null, 2)}

Formate com emojis, totais e informa√ß√µes √∫teis.`

    const response = await gemmaService.customerSuccessQuery(prompt)
    
    if (response.success) {
      return response.content
    } else {
      let resultado = 'üìã **Pend√™ncias:**\n\n'
      pendencias.forEach((p, i) => {
        resultado += `${i + 1}. **${p.nome_mentorado}**\n   üí∞ R$ ${p.valor.toLocaleString('pt-BR')}\n   üìÖ ${p.mes}\n\n`
      })
      const total = pendencias.reduce((sum, p) => sum + (p.valor || 0), 0)
      resultado += `üíº **Total:** R$ ${total.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`
      return resultado
    }
  } catch (error) {
    return 'Erro ao buscar pend√™ncias.'
  }
}

async function handleAddMentorado(context: AICommandContext, userInput: string): Promise<string> {
  const emailMatch = userInput.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/i)
  const nomeMatch = userInput.match(/(?:cadastrar|adicionar|criar)\s+([^,]+)/i)
  const turmaMatch = userInput.match(/turma\s+([^,]+)/i)
  const telefoneMatch = userInput.match(/(?:telefone|tel|fone)\s*:?\s*([0-9\(\)\s\-]+)/i)

  // Dados extra√≠dos
  const dadosExtracted = {
    nome_completo: nomeMatch?.[1]?.trim(),
    email: emailMatch?.[0],
    turma: turmaMatch?.[1]?.trim() || '2024-2',
    telefone: telefoneMatch?.[1]?.trim()
  }

  // Valida√ß√£o inteligente com IA
  const validation = await gemmaService.validateData(dadosExtracted, 'mentorado')

  if (!validation.isValid) {
    // Tratamento inteligente de erro
    const errorMessage = await gemmaService.handleAPIError(
      validation.errors,
      'cadastro de mentorado',
      userInput
    )
    return errorMessage
  }

  try {
    const mentoradoData = {
      nome_completo: dadosExtracted.nome_completo,
      email: dadosExtracted.email,
      turma: dadosExtracted.turma,
      telefone: dadosExtracted.telefone || null,
      estado_atual: 'ativo',
      estado_entrada: 'novo',
      data_entrada: new Date().toISOString().split('T')[0],
      data_nascimento: null
    }

    const { data, error } = await supabase
      .from('mentorados')
      .insert([mentoradoData])
      .select()

    if (error) {
      // Tratamento inteligente do erro do banco
      return await gemmaService.handleAPIError(error, 'cadastro no banco de dados', userInput)
    }

    // Sucesso - resposta formatada pela IA
    const successPrompt = `Um mentorado foi cadastrado com sucesso:

Dados: ${JSON.stringify(mentoradoData, null, 2)}

Formate uma mensagem de sucesso amig√°vel e informativa com emojis.`

    const response = await gemmaService.customerSuccessQuery(successPrompt)

    if (response.success) {
      return response.content
    }

    // Fallback
    return `‚úÖ **${dadosExtracted.nome_completo}** cadastrado com sucesso!\nüìß ${dadosExtracted.email}\nüéì Turma ${dadosExtracted.turma}`

  } catch (error) {
    return await gemmaService.handleAPIError(error, 'cadastro de mentorado', userInput)
  }
}

async function handleSearchMentorado(context: AICommandContext, userInput: string): Promise<string> {
  // Tentar extrair nome do contexto primeiro, depois do input
  let nome = context.entities?.nome

  if (!nome) {
    const nomeMatches = [
      userInput.match(/(?:buscar|procurar)\s+(.+)/i),
      userInput.match(/(?:tem|existe|h√°)\s+(?:o\s+)?(?:mentorado\s+)?([A-Z√Å√ä√Ç√É√á][a-z√°√™√¢√£√ß√µ]+(?:\s+[A-Z√Å√ä√Ç√É√á][a-z√°√™√¢√£√ß√µ]+)*)/i),
      userInput.match(/([A-Z√Å√ä√Ç√É√á][a-z√°√™√¢√£√ß√µ]+(?:\s+[A-Z√Å√ä√Ç√É√á][a-z√°√™√¢√£√ß√µ]+)*)\s+(?:est√°|ta)/i)
    ]

    for (const match of nomeMatches) {
      if (match && match[1]) {
        nome = match[1].trim()
        break
      }
    }
  }

  if (!nome) {
    return 'Especifique o nome: "Tem mentorado Jo√£o Silva?" ou "Buscar Maria"'
  }

  console.log(`üîç Buscando mentorado: "${nome}"`)

  try {
    // SEMPRE consultar a base de dados real
    const { data: mentorados, error } = await supabase
      .from('mentorados')
      .select('*')
      .or(`nome_completo.ilike.%${nome}%,email.ilike.%${nome}%`)

    if (error) {
      console.error('Erro na busca:', error)
      return `Erro ao buscar "${nome}": ${error.message}`
    }

    console.log(`üìä Resultados encontrados: ${mentorados?.length || 0}`)

    // Resposta baseada APENAS nos dados reais
    if (!mentorados || mentorados.length === 0) {
      return `‚ùå **N√£o existe** mentorado com o nome "${nome}" no sistema.

üìã **Dados consultados:** Base real de mentorados
üîç **Busca realizada:** Nome e email

Para cadastrar, use: "Cadastrar ${nome}, email usuario@email.com"`
    }

    // Encontrou mentorados - resposta factual
    let resultado = `‚úÖ **Encontrei ${mentorados.length} mentorado(s) com "${nome}":**\n\n`

    mentorados.forEach((m, i) => {
      resultado += `${i + 1}. **${m.nome_completo}**\n`
      resultado += `   üìß ${m.email}\n`
      resultado += `   üéì ${m.turma || 'Turma n√£o informada'}\n`
      resultado += `   üìä Status: ${m.estado_atual || 'N√£o informado'}\n`
      resultado += `   üìÖ Entrada: ${m.data_entrada || 'N√£o informada'}\n\n`
    })

    resultado += `üìã **Consulta realizada:** ${new Date().toLocaleString('pt-BR')}`

    return resultado

  } catch (error) {
    console.error('Erro na busca:', error)
    return `Erro ao consultar a base de dados: ${error instanceof Error ? error.message : 'Erro desconhecido'}`
  }
}